name: Build LZO Library for iOS

on:
  workflow_call:
    outputs:
      cache-key:
        description: "Cache key for LZO build"
        value: ${{ jobs.build-lzo.outputs.cache-key }}
      artifact-name:
        description: "Artifact name for LZO build"
        value: ${{ jobs.build-lzo.outputs.artifact-name }}
  workflow_dispatch:

env:
  IOS_DEPLOYMENT_TARGET: "13.0"

jobs:
  build-lzo:
    runs-on: macos-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      artifact-name: lzo-ios
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        xcodebuild -version

    - name: Install dependencies
      run: |
        brew install cmake wget

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=lzo-${{ runner.os }}-${{ hashFiles('BuildLZO/build.sh') }}-$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Cache LZO build
      id: cache-lzo
      uses: actions/cache@v4
      with:
        path: BuildLZO/output
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          lzo-${{ runner.os }}-

    - name: Build LZO library
      if: steps.cache-lzo.outputs.cache-hit != 'true'
      working-directory: BuildLZO
      run: |
        set -ex
        
        # Download and extract LZO source
        wget https://www.oberhumer.com/opensource/lzo/download/lzo-2.10.tar.gz
        tar xvf lzo-2.10.tar.gz lzo-2.10
        WORKDING_DIR="$(pwd)/lzo-2.10"
        
        # Check if working dir is all right
        if [ ! -d "$WORKDING_DIR" ]; then
            mkdir -p "$WORKDING_DIR"
        fi
        
        cd "$WORKDING_DIR"
        WORKDING_DIR=$(pwd)
        
        # Setup iOS build environment
        IOS_PLATFORMDIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform
        IOS_SYSROOT=($IOS_PLATFORMDIR/Developer/SDKs/iPhoneOS.sdk)
        export CFLAGS="-Wall -arch arm64 -miphoneos-version-min=${{ env.IOS_DEPLOYMENT_TARGET }}"
        
        # Configure with CMake
        cmake -G Xcode -B build \
            -DCMAKE_INSTALL_PREFIX=${WORKDING_DIR}/../output \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_SYSTEM_NAME=iOS \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.IOS_DEPLOYMENT_TARGET }} \
            -DCMAKE_OSX_SYSROOT=${IOS_SYSROOT}
        
        # Build with Xcode
        xcodebuild build \
            -project build/lzo.xcodeproj \
            -scheme ALL_BUILD \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGN_ENTITLEMENTS="" CODE_SIGNING_ALLOWED="NO" \
            STRIP_INSTALLED_PRODUCT=NO COPY_PHASE_STRIP=NO UNSTRIPPED_PRODUCT=NO
        
        # Install
        cd build
        cmake -P cmake_install.cmake

    - name: Verify LZO build
      run: |
        ls -la BuildLZO/output/lib/
        ls -la BuildLZO/output/include/
        echo "LZO libraries:"
        file BuildLZO/output/lib/*.a | head -5

    - name: Upload LZO artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lzo-ios
        path: BuildLZO/output/
        retention-days: 1